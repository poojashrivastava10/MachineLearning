import os
import pandas as pd
import sys, getopt
import csv
import random
import numpy as np
import sklearn
import csv
import getopt
import os
import sys
import pickle as pkl
from typing import List
# import dataframe as df
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

__author__ = "Pooja Shrivastava"

def main(argv):
    ipfile = ''
    opfile = ''
    try:
        opts, args = getopt.getopt(argv, 'hi:o:', ['ifile="', 'ofile='])
    except getopt.GetoptError:
        print('error:\ntcss555.py -i <inputfile> -o <outputfile>\n')
        sys.exit(2)
    for opt, arg in opts:
        if (opt == '-h'):
            print('======\nusage:\n======\ntcss555.py -i <inputfile> -o <outputfile>\n')
            sys.exit()
        elif opt in ('-i', '--ifile'):
            ipfile = arg
        elif opt in ('-o', '--ofile'):
            opfile = arg
            if not os.path.exists(opfile):
                os.makedirs(opfile)

    profiletest_ipfile=ipfile+'/profile/profile.csv'
    relationtest_ipfile=ipfile+'/relation/relation.csv'
    # print (profiletest_ipfile)
    # print(relationtest_ipfile)

    #######Gender prediction from RELATIONS and Naive Bayes ######################################
    df_test = pd.read_csv(profiletest_ipfile)
    df_test_relation = pd.read_csv(relationtest_ipfile)
    df_test_relation['like_id'] = df_test_relation['like_id'].astype(str)
    dfuserlike_test=df_test_relation.groupby(['userid'])['like_id'].apply(' '.join).reset_index()
    df_count = pd.merge(df_test, dfuserlike_test, on=['userid'])
    filename='./ps10_code/countvectrelationlog.pk'
    vectoriser=pkl.load(open(filename,'rb'))
    relationtestgender = vectoriser.transform(df_count['like_id'])
    filename='./ps10_code/NBrelationgender.pk'
    mnb=pkl.load(open(filename,'rb'))
    relationgenderlist=mnb.predict(relationtestgender)
    relationgenderuseridlist = df_count['userid'].tolist()
    relationgenderdf = pd.DataFrame(relationgenderlist)
    relationgenderdf.columns=['genderrelation']
    relationgenderuseriddf=pd.DataFrame(relationgenderuseridlist)
    relationgenderuseriddf.columns=['userid']

    useridrelationgenderdf = pd.concat([relationgenderuseriddf, relationgenderdf], axis=1)

    #################################### Gender Dataframe ##############################################
    genderframe = useridrelationgenderdf
    genderlist = genderframe['genderrelation'].tolist()

    pred = []
    for i in zip(genderlist):
        pred.append(max(i, key=i.count))

    gender = pd.DataFrame(pred)
    gender.columns = ['gender']
    genderframe = pd.concat([genderframe, gender], axis=1)

    genderframe.drop(['genderrelation'], axis=1, inplace=True)

    #######Age prediction from RELATIONS and Naive Bayes ######################################
    df_test = pd.read_csv(profiletest_ipfile)
    df_test_relation = pd.read_csv(relationtest_ipfile)
    df_test_relation['like_id'] = df_test_relation['like_id'].astype(str)
    dfuserlike_test=df_test_relation.groupby(['userid'])['like_id'].apply(' '.join).reset_index()
    df_count = pd.merge(df_test, dfuserlike_test, on=['userid'])
    filename='./ps10_code/LRagecountvectrelationlog.pk'
    vectoriser=pkl.load(open(filename,'rb'))
    relationtestage = vectoriser.transform(df_count['like_id'])
    filename='./ps10_code/LRrelationage.pk'
    lr=pkl.load(open(filename,'rb'))
    relationagelist = lr.predict(relationtestage)
    relationageuseridlist = df_count['userid'].tolist()
    relationagedf = pd.DataFrame(relationagelist)
    relationagedf.columns = ['agerelation']
    relationageuseriddf = pd.DataFrame(relationageuseridlist)
    relationageuseriddf.columns = ['userid']

    useridrelationagedf = pd.concat([relationageuseriddf, relationagedf], axis=1)

     ##################################  AGE dataframe ####################################################
    ageframe = useridrelationagedf
    agelist = ageframe['agerelation'].tolist()

    pred = []
    for i in zip(agelist):
        pred.append(max(i, key=i.count))

    age = pd.DataFrame(pred)
    age.columns = ['age']
    ageframe = pd.concat([ageframe, age], axis=1)

    ageframe.drop(['agerelation'], axis=1, inplace=True)

    ############################# Final Dataframe ###########################################################
    df_testfinal=pd.merge(genderframe,ageframe,on='userid')

    ###########################  Writing to XML  files ######################################################
    for index, row in df_testfinal.iterrows():
        filename =opfile
        with open(filename+row.userid+'.xml', 'w') as file:
            file.write('<user'+'\n')
            file.write('id="' + row.userid+'"\n')
            #age_groupfunc_value = age_groupfunc(row.age)
            if row.gender==0.0:
                temp="male"
            else:
                temp="female"
            #print (row.age)
            file.write('age_group="' + row.age +'"\n')
            file.write('gender="' + temp+'"\n')
            #file.write ('age_group="xx-24"'+'\n')
            #file.write('gender="' + temp + '"\n')
            file.write ('extrovert="3.49"'+ '\n')
            file.write ('neurotic="2.73"' + '\n')
            file.write ('agreeable="3.58"'+'\n')
            file.write ('conscientious="3.45"' + '\n')
            file.write ('open="3.91"'+'\n')
            file.write ('/>')



main(sys.argv[1:])
